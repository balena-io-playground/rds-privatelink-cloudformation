---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates a VPC Privatelink & Network Load Balancer which forwards traffic to an RDS Database.


Parameters:
  VPCEndpointServiceAllowedPrincipals:
    Description: >-
      The ARN of the IAM users & roles authorized to access the VPC endpoint.
    Type: CommaDelimitedList
  DnsServers:
    Description: >-
      The IP address of the VPC nameserver.
    Type: String
  RdsFQDN:
    Description: >-
      The fully qualified domain name (FQDN) of the RDS endpoint.
    Type: String
  SubnetList:
    Description: >-
      Comma-delimited list of subnets that the network load balancer would be able to connect to.
    Type: CommaDelimitedList
  VpcId:
    Description: >-
      ID of the VPC where the database is provisioned.
    Type: String


Resources:
  VPCEndpointService:
    Type: AWS::EC2::VPCEndpointService
    Properties: 
      AcceptanceRequired: true
      NetworkLoadBalancerArns: 
        - !Ref NLBLoadBalancer

  VPCEndpointServicePermissions:
    Type: AWS::EC2::VPCEndpointServicePermissions
    Properties: 
      AllowedPrincipals: !Ref VPCEndpointServiceAllowedPrincipals
      ServiceId: !Ref VPCEndpointService
  
  NLBLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: dualstack
      LoadBalancerAttributes: 
        - Key: "load_balancing.cross_zone.enabled"
          Value: "true"
      Scheme: internal
      Subnets: !Ref SubnetList
      Tags:
        - Key: Stack
          Value: !Ref "AWS::StackName"
        - Key: Network
          Value: Public
      Type: network

  NLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Port: 5432
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      HealthCheckEnabled: true
      IpAddressType: ipv4
      VpcId: !Ref VpcId

  NLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NLBTargetGroup
      LoadBalancerArn: !Ref NLBLoadBalancer
      Port: 5432
      Protocol: TCP

  S3BucketForLambda:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: Stack
          Value: !Ref "AWS::StackName"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:CreateBucket
                  - s3:DeleteBucket
                Resource: !Join
                  - ""
                  - - 'arn:aws:s3:::'
                    - !Ref S3BucketForLambda
                    - '/*'                        
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - cloudwatch:PutMetricData
                  - elasticloadbalancing:RegisterTargets
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:DescribeTargetHealth
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface                       
                Resource: "*"
  
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "elb_hostname_as_target.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code: lambda/
      Environment:
        Variables:
          TARGET_FQDN: !Ref RdsFQDN
          ELB_TG_ARN: !Ref NLBTargetGroup
          S3_BUCKET: !Ref S3BucketForLambda
          DNS_SERVER: !Ref DnsServers
          BUCKET_REGION: !Ref AWS::Region
          MAX_LOOKUP_PER_INVOCATION: 10
          INVOCATIONS_BEFORE_DEREGISTRATION: 3
          REPORT_IP_COUNT_CW_METRIC: false
          REMOVE_UNTRACKED_TG_IP: false
      MemorySize: 128
      Runtime: python3.7
      Timeout: 45
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  LambdaEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: ScheduledRule
      Name: ElbHostnameAsTargetEbTrigger
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt LambdaFunction.Arn
          Id: LambdaFunctionV1

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaEventRule.Arn

Outputs:
  NLBLoadBalancerDNSName:
    Description: "DNS name of the load balancer."
    Value: !GetAtt NLBLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-NLBLoadBalancerDNSName"
  LambdaFunctionArn:
    Description: LambdaFunction Lambda ARN
    Value: !GetAtt LambdaFunction.Arn
